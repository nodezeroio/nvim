return {
  require("plugins.core.colorscheme"),
  {
    "saghen/blink.cmp",
    url = "https://github.com/thomasbellio/blink.cmp",
  },
  -- {
  --   "nvim-neo-tree/neo-tree.nvim",
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --     "MunifTanjim/nui.nvim",
  --     "nvim-tree/nvim-web-devicons", -- optional, but recommended
  --   },
  --   opts = {
  --     filesystem = {
  --       filtered_items = {
  --         visible = true,
  --       },
  --     },
  --   },
  -- },
  -- -- Treesitter is a new parser generator tool that we can
  -- -- use in Neovim to power faster and more accurate
  -- -- syntax highlighting.
  -- {
  --   "nvim-treesitter/nvim-treesitter",
  --   ---@type TSConfig
  --   ---@diagnostic disable-next-line: missing-fields
  --   opts = {
  --     highlight = { enable = true },
  --     indent = { enable = true },
  --     ensure_installed = {
  --       "bash",
  --       "c",
  --       "diff",
  --       "html",
  --       "javascript",
  --       "jsdoc",
  --       "json",
  --       "jsonc",
  --       "lua",
  --       "luadoc",
  --       "luap",
  --       "markdown",
  --       "markdown_inline",
  --       "printf",
  --       "python",
  --       "query",
  --       "regex",
  --       "toml",
  --       "tsx",
  --       "typescript",
  --       "vim",
  --       "vimdoc",
  --       "xml",
  --       "yaml",
  --     },
  --     incremental_selection = {
  --       enable = true,
  --       keymaps = {
  --         init_selection = "<C-space>",
  --         node_incremental = "<C-space>",
  --         scope_incremental = false,
  --         node_decremental = "<bs>",
  --       },
  --     },
  --     textobjects = {
  --       move = {
  --         enable = true,
  --         goto_next_start = { ["]f"] = "@function.outer", ["]c"] = "@class.outer", ["]a"] = "@parameter.inner" },
  --         goto_next_end = { ["]F"] = "@function.outer", ["]C"] = "@class.outer", ["]A"] = "@parameter.inner" },
  --         goto_previous_start = { ["[f"] = "@function.outer", ["[c"] = "@class.outer", ["[a"] = "@parameter.inner" },
  --         goto_previous_end = { ["[F"] = "@function.outer", ["[C"] = "@class.outer", ["[A"] = "@parameter.inner" },
  --       },
  --     },
  --   },
  --   ---@param opts TSConfig
  --   config = function(_, opts)
  --     if type(opts.ensure_installed) == "table" then
  --       opts.ensure_installed = LazyVim.dedup(opts.ensure_installed)
  --     end
  --     require("nvim-treesitter.configs").setup(opts)
  --   end,
  -- },
  --
  -- {
  --   "nvim-treesitter/nvim-treesitter-textobjects",
  --   event = "VeryLazy",
  --   enabled = true,
  --   config = function()
  --     -- If treesitter is already loaded, we need to run config again for textobjects
  --     if LazyVim.is_loaded("nvim-treesitter") then
  --       local opts = LazyVim.opts("nvim-treesitter")
  --       require("nvim-treesitter.configs").setup({ textobjects = opts.textobjects })
  --     end
  --
  --     -- When in diff mode, we want to use the default
  --     -- vim text objects c & C instead of the treesitter ones.
  --     local move = require("nvim-treesitter.textobjects.move") ---@type table<string,fun(...)>
  --     local configs = require("nvim-treesitter.configs")
  --     for name, fn in pairs(move) do
  --       if name:find("goto") == 1 then
  --         move[name] = function(q, ...)
  --           if vim.wo.diff then
  --             local config = configs.get_module("textobjects.move")[name] ---@type table<string,string>
  --             for key, query in pairs(config or {}) do
  --               if q == query and key:find("[%]%[][cC]") then
  --                 vim.cmd("normal! " .. key)
  --                 return
  --               end
  --             end
  --           end
  --           return fn(q, ...)
  --         end
  --       end
  --     end
  --   end,
  -- },
  -- {
  --   "yetone/avante.nvim",
  --   event = "VeryLazy",
  --   version = false, -- Never set this value to "*"! Never!
  --   opts = {
  --     -- add any opts here
  --     -- for example
  --     provider = "openai",
  --     providers = {
  --       openai = {
  --         endpoint = "https://api.openai.com/v1",
  --         model = "gpt-4o", -- your desired model (or use gpt-4o, etc.)
  --         timeout = 30000, -- Timeout in milliseconds, increase this for reasoning models
  --         extra_request_body = {
  --           temperature = 0,
  --           max_completion_tokens = 8192, -- Increase this to include reasoning tokens (for reasoning models)
  --         },
  --         --reasoning_effort = "medium", -- low|medium|high, only used for reasoning models
  --       },
  --     },
  --   },
  --   -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  --   build = "make",
  --   -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
  --   dependencies = {
  --     "nvim-treesitter/nvim-treesitter",
  --     "stevearc/dressing.nvim",
  --     "nvim-lua/plenary.nvim",
  --     --- The below dependencies are optional,
  --     "thomasbellio/telescope.nvim", -- for file_selector provider telescope
  --     "hrsh7th/nvim-cmp", -- autocompletion for avante commands and mentions
  --     "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
  --     {
  --       -- support for image pasting
  --       "HakonHarnes/img-clip.nvim",
  --       event = "VeryLazy",
  --       opts = {
  --         -- recommended settings
  --         default = {
  --           embed_image_as_base64 = false,
  --           prompt_for_file_name = false,
  --           drag_and_drop = {
  --             insert_mode = true,
  --           },
  --           -- required for Windows users
  --           use_absolute_path = true,
  --         },
  --       },
  --     },
  --     {
  --       -- Make sure to set this up properly if you have lazy=true
  --       "MeanderingProgrammer/render-markdown.nvim",
  --       opts = {
  --         file_types = { "markdown", "Avante" },
  --       },
  --       ft = { "markdown", "Avante" },
  --     },
  --   },
  -- },
}
